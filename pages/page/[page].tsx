import React from 'react';
import { GetStaticProps, GetStaticPropsContext, PreviewData } from 'next';
import Head from 'next/head';
import { ParsedUrlQuery } from 'querystring';
import { match } from 'ts-pattern';

import { getAllposts, getPostsByPage } from '@/lib/notionAPI';
import { isArray } from '@/lib/util/isArray';
import { Post } from '@/domain/models/Post';
import SinglePost from '@/components/Post/SinglePost';
import { DEFAULT_POSTS_COUNT } from '@/constants';

interface Props {
  posts: Post[];
}

interface Params {
  params: {
    page: string;
  };
}

export const getStaticPaths = async () => {
  const allPosts = await getAllposts();

  if (!allPosts) {
    console.error('cannot fetch blog posts');
    return;
  }
  const paths: Params[] = [
    ...Array(Math.ceil(allPosts.length / DEFAULT_POSTS_COUNT)),
  ].map((_, i) => {
    return { params: { page: (i + 1).toString(10) } };
  });

  return {
    paths,
    fallback: 'blocking',
  };
};

const getPageQueryAsNumber = (pageQuery: string | string[] | undefined) => {
  if (isArray(pageQuery)) return parseInt(pageQuery[0]);

  return match(typeof pageQuery)
    .with('string', () => parseInt(pageQuery as string, 10))
    .with('undefined', () => 1)
    .otherwise(() => 1);
};

export const getStaticProps: GetStaticProps<Props> = async ({
  params,
}: GetStaticPropsContext<ParsedUrlQuery, PreviewData>) => {
  const currentPageQuery = params?.page;
  const postsByPage =
    (await getPostsByPage(getPageQueryAsNumber(currentPageQuery))) || [];

  return {
    props: {
      posts: postsByPage,
    },
    revalidate: 60 * 60 * 6,
  };
};

const Post = ({ posts }: Props) => {
  return (
    <>
      <div className="container w-full h-full mx-auto">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/fabicon.ico" />
        </Head>

        <main className="container w-full mt-16">
          <h1 className="text-5xl font-medium text-center mb-16">
            Notion Blog
          </h1>
          {posts.map((post) => (
            <SinglePost post={post} key={post.slug} />
          ))}
        </main>
      </div>
    </>
  );
};

export default Post;
